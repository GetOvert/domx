{"version":3,"file":"StateController.js","sourceRoot":"","sources":["src/StateController.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, ReactiveController, ReactiveControllerHost } from \"lit\";\r\n\r\n\r\n\r\nclass RootStateChangeEvent extends Event {\r\n    static eventType = \"rootstate-change\";\r\n    event:Event|string;\r\n    rootState:RootStateContainer;\r\n    constructor(event:Event|string, rootState:RootStateContainer) {\r\n        super(RootStateChangeEvent.eventType)\r\n        this.event = event;\r\n        this.rootState = rootState;\r\n    }\r\n};\r\n\r\nclass StatePathChangeEvent extends Event {\r\n    controller:any;\r\n    statePath:string;\r\n    state:any;\r\n    constructor(controller:any, statePath:string, state:any) {\r\n        super(statePath);\r\n        this.controller = controller;\r\n        this.statePath = statePath;\r\n        this.state = state;\r\n    }\r\n}\r\n\r\ntype RootStateContainer = {[key:string]: any};\r\ntype StateChangeEventListener = (event:StatePathChangeEvent) => void;\r\n\r\n\r\nconst rootState:RootStateContainer = {};\r\n\r\nclass RootState {\r\n\r\n    private static bus = new EventTarget();\r\n\r\n    private static listenerCounts:{[statePath:string]:number|undefined} = {};\r\n\r\n    static addStateChangeEventListener(statePath:string, listener:StateChangeEventListener, signal:AbortSignal) {\r\n        this.bus.addEventListener(statePath, listener as EventListener, {signal} as AddEventListenerOptions);\r\n        const count = this.listenerCounts[statePath];\r\n        this.listenerCounts[statePath] = count === undefined ? 1 : count + 1;\r\n\r\n        // delete state path when aborted\r\n        signal.addEventListener(\"abort\", () => {\r\n            const count = this.listenerCounts[statePath]! - 1;\r\n            this.listenerCounts[statePath] = count;\r\n            if (count === 0) {\r\n                delete rootState[statePath];\r\n            }\r\n        }); \r\n    }\r\n\r\n    static get<T>(name:string):T|null {\r\n        const value = rootState[name];\r\n        return value === undefined ? null : value as T;\r\n    }\r\n\r\n    static change<T>(controller:any, event:Event|string, statePath:string, state:T):true {\r\n        rootState[statePath] = state;\r\n        this.bus.dispatchEvent(new StatePathChangeEvent(controller, statePath, state));\r\n        this.bus.dispatchEvent(new RootStateChangeEvent(event, rootState));\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n\r\nconst stateControllerIndexedProxyHandler:ProxyHandler<StateController> = {\r\n    get: (target:StateController, property:string) => target[property],\r\n    set: (target:StateController, property:string, value:any):true =>\r\n        target[property] = value && true\r\n};\r\n\r\n\r\n\r\nexport class StateController implements ReactiveController {\r\n    [name:string]: any;\r\n\r\n    get stateId():string|null { return this.host.stateId !== undefined ? \r\n        this.host.stateId : null };\r\n\r\n    constructor(host: LitElement) {\r\n        (this.host = host).addController(this);\r\n        return new Proxy(this, stateControllerIndexedProxyHandler);\r\n    }\r\n\r\n    host: LitElement & {stateId?:string};\r\n\r\n    private stateProperties:Array<string> = [];\r\n    abortController:AbortController = new AbortController();\r\n\r\n    trackState(name:string):void {\r\n        this.stateProperties.push(name);\r\n    }\r\n\r\n    hostConnected() {\r\n        this.stateProperties.forEach(this.initState);\r\n    }\r\n\r\n    requestUpdate(event:Event|string) {\r\n        this.stateProperties.forEach(name =>\r\n            RootState.change(this, event, this.getStateName(name), this[name]));\r\n        this.host.requestUpdate();\r\n    }\r\n\r\n    hostDisconnected() {\r\n        this.abortController.abort();\r\n        this.abortController = new AbortController();\r\n    }\r\n\r\n    private initState(name:string) {\r\n        this.syncStateValue(name);\r\n        this.addStateListeners(name);\r\n    }\r\n\r\n    private syncStateValue(name:string) {\r\n        const statePath = this.getStateName(name);\r\n        const initialState = RootState.get(statePath);\r\n        if (initialState === null) {\r\n            RootState.change(this, `${this.constructor.name}.trackState(${name})`, statePath, this[name]);\r\n        } else {\r\n            this[name] = initialState;\r\n        }\r\n    }\r\n\r\n    private addStateListeners(name:string) {\r\n        const statePath = this.getStateName(name);\r\n        RootState.addStateChangeEventListener(statePath, (event:StatePathChangeEvent) => {\r\n            if (event.controller !== this) {\r\n                this[name] = event.state;\r\n                this.host.requestUpdate();\r\n            }\r\n        }, this.abortController.signal);\r\n    }\r\n\r\n    private getStateName(name:string) {\r\n        const stateIdPath = this.stateId ? `.${this.stateId}` : \"\";\r\n        return `${this.constructor.name}${stateIdPath}.${name}`;\r\n    }\r\n}\r\n\r\n\r\n"]}