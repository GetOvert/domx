{"version":3,"file":"Product.js","sourceRoot":"","sources":["../src/Product/Product.ts"],"names":[],"mappings":"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","sourcesContent":["import { StateController } from \"../StateController\";\r\nimport { produce } from \"immer\";\r\nexport { produce }\r\n\r\n\r\ntype NextFunction<TState> = (state:TState) => void;\r\ntype TapFunction<TState> = (product:Product<TState>) => void;\r\n\r\n/**\r\n * A monad like class that promotes functional style\r\n * state changes with a StateController\r\n */\r\nexport class Product<TState> {\r\n    /**\r\n     * Creates a new Product object.\r\n     */\r\n    static of<TState>(controller: StateController, stateName?:string) {\r\n        return new Product<TState>(controller, stateName || \"state\");\r\n    }\r\n\r\n    /** A lifting function that calls next */\r\n    static nextWith = <TState>(product: Product<TState>) => (fn:NextFunction<TState>) => product.continue(product).next(fn);\r\n    /** A lifting function that calls tap */\r\n    static tapWith = <TState>(product: Product<TState>) => (fn:TapFunction<TState>) => product.continue(product).tap(fn);\r\n    /** A chainable call to requestUpdate */\r\n    static requestUpdate = (event:Event|string) => <TState>(product: Product<TState>) => product.requestUpdate(event);\r\n    /** A chainable call to dispatchHostEvent */\r\n    static dispatchHostEvent = (event:Event) => <TState>(product:Product<TState>) => product.dispatchHostEvent(event);\r\n    /** A chainable call to next */\r\n    static next = <TState>(fn:NextFunction<TState>) => (product: Product<TState>) => product.next(fn);\r\n    /** A chainable call to tap */\r\n    static tap = <TState>(fn:TapFunction<TState>) => (product: Product<TState>) => product.tap(fn);\r\n    /** Returns the current state */\r\n    static getState = <TState>(product: Product<TState>) => product.getState();\r\n\r\n\r\n    /**\r\n     * \r\n     * @param controller \r\n     * @param stateName \r\n     */\r\n    constructor(controller: StateController, stateName:string) {\r\n        this.controller = controller;\r\n        this.stateName = stateName;\r\n    }\r\n\r\n    public controller:StateController;\r\n    private stateName:string;\r\n\r\n    /**\r\n     * Returns a snapshot of the state property.\r\n     * Similar to a flatten method.\r\n     * @returns {TState}\r\n     */\r\n    getState():TState {\r\n        return this.controller[this.stateName] as TState;\r\n    }\r\n\r\n    /**\r\n     * The primary mapping function.\r\n     * @param {NextFunction<TState>} fn\r\n     * @returns {Product<TState>}\r\n     */\r\n    next(fn: NextFunction<TState>) {\r\n        const state = this.controller[this.stateName] as TState;\r\n        this.controller[this.stateName] = produce(state, (draft:TState) => fn(draft)) as TState;\r\n        return this.continue(this);\r\n    }\r\n\r\n    /**\r\n     * Use to perform branching operations.\r\n     * @param {TapFunction<TState>} fn\r\n     * @returns {Product<TState>}\r\n     */\r\n    tap(fn: TapFunction<TState>) {\r\n        fn(this);\r\n        return this.continue(this);\r\n    }\r\n\r\n    /**\r\n     * Enables running multiple 'next' functions in a pipe.\r\n     * @param  {Array<NextFunction<TState>>} fns a series of functions to call next on.\r\n     * @returns {Product<TState>}\r\n     */\r\n    pipeNext(...fns: Array<NextFunction<TState>>):Product<TState> {\r\n        return fns.reduce((v:Product<TState>, f:NextFunction<TState>) => v.next(f), this);\r\n    }\r\n\r\n    /**\r\n     * Enables running multiple 'tap' functions in a pipe.\r\n     * @param  {...any} fns a series of functions to call tap on.\r\n     * @returns {Product<TState>}\r\n     */\r\n    pipeTap(...fns: Array<TapFunction<TState>>):Product<TState> {\r\n        return fns.reduce((v:Product<TState>, f:TapFunction<TState>) => v.tap(f), this);\r\n    }\r\n\r\n    /**\r\n     * Calls requestUpdate on the controller.\r\n     * @param {Event|string} event\r\n     * @returns {Product<TState>}\r\n     */\r\n    requestUpdate(event:Event|string) {\r\n        this.controller.requestUpdate(event);\r\n        return this.continue(this);\r\n    }\r\n\r\n    /**\r\n     * Dispatches an event on the controllers host element.\r\n     * @param event \r\n     * @returns {Product<TState>}\r\n     */\r\n    dispatchHostEvent(event:Event) {\r\n        this.controller.host.dispatchEvent(event);\r\n        return this.continue(this);\r\n    }\r\n\r\n    /**\r\n     * Returns a new Product object based on the current one.\r\n     * Convenient for mapping methods.\r\n     * @returns {Product<TState>}\r\n     */\r\n    continue(product:Product<TState>) {\r\n        return Product.of<TState>(product.controller, product.stateName);\r\n    }\r\n}"]}