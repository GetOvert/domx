{"version":3,"file":"applyRdtLogging.js","sourceRoot":"","sources":["src/applyRdtLogging.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAwB,MAAM,mBAAmB,CAAC;AACpE,OAAO,EAAE,eAAe,EAAE,CAAA;AAE1B;;;;;GAKG;AAGH,IAAI,UAAU,GAA4B,SAAS,CAAC;AAGpD;;;;;GAKG;AACH,MAAM,eAAe,GAAG,CAAC,IAAY,EAAO,EAAE;IAE1C,+BAA+B;IAC/B,IAAI,UAAU,KAAK,SAAS,EAAE;QAC1B,OAAO;KACV;IAED,sDAAsD;IACtD,8BAA8B;IAC9B,UAAU,GAAG,CAAC,MAAM,CAAC,4BAA4B,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACtD,IAAI,SAAS,CAAC,MAAM,CAAC,4BAA4B,EAAE,IAAI,CAAC,CAAC;AACjE,CAAC,CAAC;AAGF,MAAM,SAAS;IAIX,YAAY,YAA8B,EAAE,IAAY;QACpD,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QACxC,IAAI,CAAC,yBAAyB,EAAE,CAAC;IACrC,CAAC;IAED;;;OAGG;IACK,iBAAiB,CAAC,IAAY;QAClC,MAAM,EAAE,GAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAC,IAAI,EAAC,CAAC,CAAC;QAC9C,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAC3B,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACtC,OAAO,EAAE,CAAC;IACd,CAAC;IAAA,CAAC;IAEM,yBAAyB;QAC7B,SAAS,CAAC,+BAA+B,CAAC,CAAC,KAA0B,EAAE,EAAE,CACrE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,0BAA0B,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;IACtF,CAAC;IAEO,0BAA0B,CAAC,KAAkB;QACjD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC3B,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;SAC1B;QACD,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QACjD,OAAO,MAAM,CAAC,SAAS,CAAC;QACxB,MAAM,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;QACzB,OAAO,MAAM,CAAC;IAClB,CAAC;IAEO,kBAAkB,CAAC,IAAsB;QAE7C,yBAAyB;QACzB,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,cAAc,EAAE;YAC/D,OAAO;SACV;QAED,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE;YAC5B,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC9B;aAAM;YACH,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,0DAA0D,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;SAC9G;IACL,CAAC;IAED;;;;OAIG;IACK,eAAe,CAAC,IAAsB;QAC1C,OAAO,IAAI,CAAC,IAAI,KAAK,UAAU,IAAI,CAC/B,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,gBAAgB;YACtC,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,eAAe,CACxC,CAAC;IACN,CAAC;CACJ","sourcesContent":["import { RootState, RootStateChangeEvent } from \"./StateController\";\r\nexport { applyRdtLogging }\r\n\r\n/*\r\n * Redux Dev Tools\r\n * \r\n * Docs:\r\n * https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/API/Methods.md\r\n */\r\n\r\n\r\nlet _rdtLogger:RdtLogger|null|undefined = undefined;\r\n\r\n\r\n/**\r\n * Logs root state changes to redux dev tools\r\n * and pushes previous state snapshots from rdt\r\n * to the root state and any connected controllers\r\n * @param name the name of the dev tools instance\r\n */\r\nconst applyRdtLogging = (name?:string):void => {\r\n\r\n    // singleton; return if defined\r\n    if (_rdtLogger !== undefined) {\r\n        return;\r\n    }\r\n\r\n    // set the logger to null if no extension is installed\r\n    // otherwise create the logger\r\n    _rdtLogger = !window.__REDUX_DEVTOOLS_EXTENSION__ ? null :\r\n        new RdtLogger(window.__REDUX_DEVTOOLS_EXTENSION__, name);\r\n};\r\n\r\n\r\nclass RdtLogger {\r\n    rdtExtension:DevToolsExtension;\r\n    rdt:DevToolsInstance;\r\n\r\n    constructor(rdtExtension:DevToolsExtension, name?:string, ) {\r\n        this.rdtExtension = rdtExtension;\r\n        this.rdt = this.connectToDevTools(name);\r\n        this.listenForRootstateChanges();\r\n    }\r\n\r\n    /**\r\n     * Calls connect on the dev tools instance\r\n     * @param name the dev tools instance name\r\n     */\r\n    private connectToDevTools(name?:string):DevToolsInstance {\r\n        const dt =  this.rdtExtension.connect({name});\r\n        dt.init(RootState.current);\r\n        dt.subscribe(this.updateFromDevTools);\r\n        return dt;\r\n    };\r\n\r\n    private listenForRootstateChanges() {\r\n        RootState.addRootStateChangeEventListener((event:RootStateChangeEvent) =>\r\n            this.rdt.send(this.getDevToolsActionFromEvent(event.event), event.rootState));\r\n    }\r\n\r\n    private getDevToolsActionFromEvent(event:Event|string):DevToolsAction {\r\n        if (typeof event === \"string\") {\r\n            return { type: event };\r\n        }\r\n        const action = JSON.parse(JSON.stringify(event));\r\n        delete action.isTrusted;\r\n        action.type = event.type;\r\n        return action;\r\n    }\r\n\r\n    private updateFromDevTools(data:DevToolsEventData) {\r\n\r\n        // return if initializing\r\n        if (data.type === \"START\" || data.payload.type === \"IMPORT_STATE\") {\r\n            return;\r\n        }\r\n    \r\n        if (this.canHandleUpdate(data)) {\r\n            RootState.push(data.state);\r\n        } else {\r\n            this.rdt.error(`DataElement RDT logging does not support payload type: ${data.type}:${data.payload.type}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if we can handle the data update from dev tools\r\n     * @param data\r\n     * @returns {boolean}\r\n     */\r\n    private canHandleUpdate(data:DevToolsEventData):boolean {\r\n        return data.type === \"DISPATCH\" && (\r\n            data.payload.type === \"JUMP_TO_ACTION\" ||\r\n            data.payload.type === \"JUMP_TO_STATE\"\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n \r\ninterface DevToolsExtension {\r\n    /** Creates a new dev tools extension instance. */\r\n    connect({name}:{name?:string}):DevToolsInstance\r\n}\r\n\r\n\r\ninterface DevToolsInstance {\r\n    /** Sends the initial state to the monitor. */\r\n    init(state:any): void,\r\n    /** \r\n     * Adds a change listener. It will be called any time an action\r\n     * is dispatched from the monitor. Returns a function to\r\n     * unsubscribe the current listener.\r\n     */\r\n    subscribe(listener:Function): void,\r\n    /** Unsubscribes all listeners. */\r\n    unsubscribe(): void,\r\n    /** Sends a new action and state manually to be shown on the monitor. */\r\n    send(action:DevToolsAction|string, state:any): void,\r\n    /** Sends the error message to be shown in the extension's monitor. */\r\n    error(message:string): void\r\n}\r\n\r\n\r\ninterface DevToolsAction {\r\n    type: string\r\n}\r\n\r\n\r\ninterface DevToolsEventData {\r\n    id:string,\r\n    /**\r\n     * \"START\" - on RDT init\r\n     * \"DISPATCH\" - when dispatching\r\n     */\r\n    type: string,\r\n    payload: {\r\n        /**\r\n         * JUMP_TO_ACTION - can change state here\r\n         * TOGGLE_ACTION - dont support toggle\r\n         */\r\n        type: string\r\n    },\r\n    state: any\r\n}\r\n\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION__?: DevToolsExtension;\r\n    }\r\n}\r\n"]}